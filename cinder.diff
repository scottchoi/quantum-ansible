diff --git a/cinder/volume/drivers/nexenta/options.py b/cinder/volume/drivers/nexenta/options.py
index d0720e6..7da696c 100644
--- a/cinder/volume/drivers/nexenta/options.py
+++ b/cinder/volume/drivers/nexenta/options.py
@@ -32,6 +32,16 @@ NEXENTA_CONNECTION_OPTIONS = [
     cfg.StrOpt('nexenta_rest_protocol',
                default='auto',
                help='Use http or https for REST connection (default auto)'),
+    cfg.StrOpt('san_ip',
+               default='',
+               help='IP address of SAN controller'),
+    cfg.StrOpt('san_login',
+               default='admin',
+               help='Username for SAN controller'),
+    cfg.StrOpt('san_password',
+               default='',
+               help='Password for SAN controller',
+               secret=True),
 ]
 
 NEXENTA_ISCSI_OPTIONS = [
diff --git a/cinder/volume/drivers/nexenta/volume.py b/cinder/volume/drivers/nexenta/volume.py
index a4200ca..a352819 100644
--- a/cinder/volume/drivers/nexenta/volume.py
+++ b/cinder/volume/drivers/nexenta/volume.py
@@ -219,6 +219,30 @@ class NexentaDriver(driver.ISCSIDriver):  # pylint: disable=R0921
         """
         raise NotImplementedError
 
+    def _is_lu_exists(self, zvol_name):
+        """Check if LU exists on appliance.
+
+        :param zvol_name: Zvol name
+        :raises: NexentaException if zvol not exists
+        :return: True if LU exists, else False
+        """
+        return bool(self.nms.scsidisk.lu_exists(zvol_name))
+
+    def _is_lu_shared(self, zvol_name):
+        """Check if LU exists on appliance and shared.
+
+        :param zvol_name: Zvol name
+        :raises: NexentaException if Zvol not exist
+        :return: True if LU exists and shared, else False
+        """
+        try:
+            shared = self.nms.scsidisk.lu_shared(zvol_name) > 0
+        except nexenta.NexentaException as exc:
+            if 'does not exist for zvol' not in exc.args[1]:
+                raise  # Zvol does not exists
+            shared = False  # LU does not exist
+        return shared
+
     def _do_export(self, _ctx, volume, ensure=False):
         """Do all steps to get zvol exported as LUN 0 at separate target.
 
@@ -230,51 +254,62 @@ class NexentaDriver(driver.ISCSIDriver):  # pylint: disable=R0921
         zvol_name = self._get_zvol_name(volume['name'])
         target_name = self._get_target_name(volume['name'])
         target_group_name = self._get_target_group_name(volume['name'])
-
-        target_already_configured = False
-        try:
-            self.nms.iscsitarget.create_target({'target_name': target_name})
-        except nexenta.NexentaException as exc:
-            if ensure and 'already configured' in exc.args[1]:
-                target_already_configured = True
-                LOG.info(_('Ignored target creation error "%s" while ensuring '
-                           'export'), exc)
-            else:
-                raise
-        try:
-            self.nms.stmf.create_targetgroup(target_group_name)
-        except nexenta.NexentaException as exc:
-            if ((ensure and 'already exists' in exc.args[1]) or
-                    (target_already_configured and
-                     'target must be offline' in exc.args[1])):
-                LOG.info(_('Ignored target group creation error "%s"'
+        lu_exists = self._is_lu_exists(zvol_name)
+        if lu_exists:
+            lu_shared = self._is_lu_shared(zvol_name)
+        else:
+            lu_shared = False
+        if not lu_exists:
+            target_already_configured = False
+            try:
+                self.nms.iscsitarget.create_target({
+                    'target_name': target_name})
+            except nexenta.NexentaException as exc:
+                if ensure and 'already configured' in exc.args[1]:
+                    target_already_configured = True
+                    LOG.info(_('Ignored target creation error "%s" while '
+                               'ensuring export'), exc)
+                else:
+                    raise
+            try:
+                self.nms.stmf.create_targetgroup(target_group_name)
+            except nexenta.NexentaException as exc:
+                if ((ensure and 'already exists' in exc.args[1]) or
+                        (target_already_configured and
+                         'target must be offline' in exc.args[1])):
+                    LOG.info(_('Ignored target group creation error "%s"'
+                               ' while ensuring export'), exc)
+                else:
+                    raise
+            self.nms.iscsitarget.offline_iscsi_target(target_name)
+            try:
+                self.nms.stmf.add_targetgroup_member(target_group_name,
+                                                     target_name)
+            except nexenta.NexentaException as exc:
+                if ((ensure and 'already exists' in exc.args[1]) or
+                        (target_already_configured and
+                         'target must be offline' in exc.args[1])):
+                    raise
+                LOG.info(_('Ignored target group member addition error "%s" '
+                           'while ensuring export'), exc)
+            self.nms.iscsitarget.online_iscsi_target(target_name)
+            try:
+                self.nms.scsidisk.create_lu(zvol_name, {})
+            except nexenta.NexentaException as exc:
+                if not ensure or 'in use' not in exc.args[1]:
+                    raise
+                LOG.info(_('Ignored LU creation error "%s"'
+                           ' while ensuring export'), exc)
+        if not lu_shared:
+            try:
+                self.nms.scsidisk.add_lun_mapping_entry(zvol_name, {
+                    'target_group': target_group_name,
+                    'lun': '0'})
+            except nexenta.NexentaException as exc:
+                if not ensure or 'view entry exists' not in exc.args[1]:
+                    raise
+                LOG.info(_('Ignored LUN mapping entry addition error "%s"'
                            ' while ensuring export'), exc)
-            else:
-                raise
-        try:
-            self.nms.stmf.add_targetgroup_member(target_group_name,
-                                                 target_name)
-        except nexenta.NexentaException as exc:
-            if not ensure or 'already exists' not in exc.args[1]:
-                raise
-            LOG.info(_('Ignored target group member addition error "%s" while '
-                       'ensuring export'), exc)
-        try:
-            self.nms.scsidisk.create_lu(zvol_name, {})
-        except nexenta.NexentaException as exc:
-            if not ensure or 'in use' not in exc.args[1]:
-                raise
-            LOG.info(_('Ignored LU creation error "%s"'
-                       ' while ensuring export'), exc)
-        try:
-            self.nms.scsidisk.add_lun_mapping_entry(zvol_name, {
-                'target_group': target_group_name,
-                'lun': '0'})
-        except nexenta.NexentaException as exc:
-            if not ensure or 'view entry exists' not in exc.args[1]:
-                raise
-            LOG.info(_('Ignored LUN mapping entry addition error "%s"'
-                       ' while ensuring export'), exc)
         return '%s:%s,1 %s 0' % (self.configuration.san_ip,
                                  self.configuration.iscsi_port, target_name)
 
@@ -330,6 +365,37 @@ class NexentaDriver(driver.ISCSIDriver):  # pylint: disable=R0921
 
         return self._stats
 
+    def copy_image_to_volume(self, context, volume, image_service, image_id):
+        already_exported = False
+        model_update = None
+        try:
+            model_update = self.create_export(context, volume)
+        except nexenta.NexentaException as exc:
+            if 'already configured' not in exc.args[1] and \
+                    'already exists' not in exc.args[1] and \
+                    'target must be offline' not in exc.args[1] and \
+                    'view entry exists' not in exc.args[1]:
+                raise
+            already_exported = True
+        if model_update:
+            provider_location = volume['provider_location']
+            volume['provider_location'] = model_update['provider_location']
+        else:
+            volume_host = volume['host']
+            volume['host'] = self.configuration.san_ip
+        try:
+            super(NexentaDriver, self).copy_image_to_volume(context,
+                                                            volume,
+                                                            image_service,
+                                                            image_id)
+        finally:
+            if model_update:
+                volume['provider_location'] = provider_location
+            else:
+                volume['host'] = volume_host
+            if not already_exported:
+                self.remove_export(context, volume)
+
     def _update_volume_stats(self):
         """Retrieve stats info for Nexenta device."""
 
